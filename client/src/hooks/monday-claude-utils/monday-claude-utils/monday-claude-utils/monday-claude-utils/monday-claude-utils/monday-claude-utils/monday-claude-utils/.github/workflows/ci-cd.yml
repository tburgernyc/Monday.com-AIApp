name: Monday.com Claude Integration CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci && cd ..
      
      - name: Lint code
        run: |
          npm run lint
      
      - name: Run tests
        run: |
          npm test
      
      - name: Run client tests
        run: |
          cd client && npm test && cd ..
      
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage/
  
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci && cd ..
      
      - name: Build client
        run: |
          cd client && npm run build && cd ..
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: |
            client/build/
            monday-claude-utils/
            *.js
            package.json
            package-lock.json
  
  deploy-us:
    name: Deploy to US region
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build
          path: .
      
      - name: Install Monday.com Apps CLI
        run: npm install -g @mondaycom/apps-cli
      
      - name: Configure Monday.com Apps CLI
        run: |
          echo "${{ secrets.MONDAY_CLI_CONFIG }}" > ~/.monday-cli-config.json
      
      - name: Deploy to US region
        run: mapps code:push
        env:
          MONDAY_API_TOKEN: ${{ secrets.MONDAY_API_TOKEN }}
          MONDAY_CLIENT_ID: ${{ secrets.MONDAY_CLIENT_ID }}
          MONDAY_CLIENT_SECRET: ${{ secrets.MONDAY_CLIENT_SECRET }}
          MONDAY_SIGNING_SECRET: ${{ secrets.MONDAY_SIGNING_SECRET }}
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          OAUTH_REDIRECT_URI: ${{ secrets.OAUTH_REDIRECT_URI }}
          REGION: "US"
  
  deploy-eu:
    name: Deploy to EU region
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build
          path: .
      
      - name: Install Monday.com Apps CLI
        run: npm install -g @mondaycom/apps-cli
      
      - name: Configure Monday.com Apps CLI
        run: |
          echo "${{ secrets.MONDAY_CLI_CONFIG }}" > ~/.monday-cli-config.json
      
      - name: Deploy to EU region
        run: mapps code:push --region EU
        env:
          MONDAY_API_TOKEN: ${{ secrets.MONDAY_API_TOKEN }}
          MONDAY_CLIENT_ID: ${{ secrets.MONDAY_CLIENT_ID }}
          MONDAY_CLIENT_SECRET: ${{ secrets.MONDAY_CLIENT_SECRET }}
          MONDAY_SIGNING_SECRET: ${{ secrets.MONDAY_SIGNING_SECRET }}
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          OAUTH_REDIRECT_URI: ${{ secrets.OAUTH_REDIRECT_URI }}
          REGION: "EU"

  notify:
    name: Notify deployment
    runs-on: ubuntu-latest
    needs: [deploy-us, deploy-eu]
    if: always()
    
    steps:
      - name: Check deployment status
        id: status
        run: |
          if [ "${{ needs.deploy-us.result }}" == "success" ] && [ "${{ needs.deploy-eu.result }}" == "success" ]; then
            echo "::set-output name=deployment_status::success"
          else
            echo "::set-output name=deployment_status::failure"
          fi
      
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Monday.com Claude Integration Deployment: ${{ steps.status.outputs.deployment_status == 'success' && 'Successfully deployed! ✅' || 'Deployment failed! ❌' }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Monday.com Claude Integration Deployment"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Status:* ${{ steps.status.outputs.deployment_status == 'success' && 'Successfully deployed to US and EU regions! ✅' || 'Deployment failed! ❌' }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Details:*\n- US Region: ${{ needs.deploy-us.result }}\n- EU Region: ${{ needs.deploy-eu.result }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Commit:* <${{ github.event.repository.html_url }}/commit/${{ github.sha }}|${{ github.sha }}>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK